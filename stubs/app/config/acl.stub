<?php

return array(
	
	/*
	|--------------------------------------------------------------------------
	| Roles
	|--------------------------------------------------------------------------
	|
	| A role is an object that may request access to a Resource. String values
	| are converted into Zend\Permissions\Acl\Role\GenericRole objects.
	| Use associative arrays to define inheritance.
	|
	*/
	'roles' => array(
		'guest',
		'public'      => 'guest',
		'user'        => 'guest', // Inherits from guest
		
		'owner',
		
		'moderator',
		'admin'       => 'moderator', // Inherits from moderator
		
		'systemadmin',
	),
	
	/*
	|--------------------------------------------------------------------------
	| Resources
	|--------------------------------------------------------------------------
	|
	| A resource is an object to which access is controlled. Strings values
	| are converted into Zend\Permissions\Acl\Resource\GenericResource objects.
	| Use associative arrays to define inheritance.
	|
	*/
	'resources' => array(
		'guest_accessible',
		'user' => 'guest_accessible',
		
		'user_accessible',
		
		'owner_accessible',
		'user:email' => 'owner_accessible',
		
		'moderator_accessible',
		
		'admin_accessible',
		
		'systemadmin_accessible',
	),
	
	/*
	|--------------------------------------------------------------------------
	| Rules
	|--------------------------------------------------------------------------
	|
	| Rules can be established to define how resources may be accessed by
	| roles.
	|
	*/
	'rules' => function ($acl) {
		$acl->allow('guest',
			array('guest_accessible'),
			array('view')
		);
		
		$acl->allow('user',
			array('user_accessible'),
			array('view')
		);
		
		$acl->allow('owner',
			array('guest_accessible', 'user_accessible', 'owner_accessible'),
			array('view', 'create', 'edit', 'delete')
		);
		
		$acl->allow('moderator',
			array('moderator_accessible'),
			array('view', 'create', 'edit', 'delete')
		);
		
		$acl->allow('admin',
			array('admin_accessible'),
			array('view', 'create', 'edit', 'delete')
		);
		
		$acl->allow('systemadmin',
			array('systemadmin_accessible'),
			array('view', 'create', 'edit', 'delete')
		);
	},
	
	/*
	|--------------------------------------------------------------------------
	| User Roles
	|--------------------------------------------------------------------------
	|
	| Returns an array of defined roles for the current user.
	| An optional resource may be passed for resource-specific role definitions.
	|
	*/
	'user_roles' => function ($user = null, $resource = null, $resource_context = null) {
		// Assign 'guest' to logged out user.
		if (!$user instanceof User) {
			return array('guest');
		}
		
		// Assign 'user' to logged in user.
		$roles = array('user');
		
		// Assign 'owner' to owners/creators of content.
		$context = $resource_context ? $resource_context : $resource;
		if ($context instanceof Eloquent) {
			if ($context->owner_id == $user->id) {
				$roles[] = 'owner';
			}
			else if ($context->creator_id == $user->id) {
				$roles[] = 'owner';
			}
			else if ($context instanceof User && $context->id == $user->id) {
				$roles[] = 'owner';
			}
		}
		
		// Check user roles table.
		foreach ($user->roles as $role) {
			$roles[] = $role->name;
		}
		
		return $roles;
	},
);
