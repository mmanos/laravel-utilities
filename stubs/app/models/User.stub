<?php

use Illuminate\Auth\UserTrait;
use Illuminate\Auth\UserInterface;

class User extends Model implements UserInterface
{
	use UserTrait, SoftDeletingTrait;
	
	/**
	 * The database table used by the model.
	 *
	 * @var string
	 */
	protected $table = 'users';
	
	/**
	 * The attributes excluded from the model's JSON form.
	 *
	 * @var array
	 */
	protected $hidden = array('password', 'updated_at', 'deleted_at', 'remember_token', 'pivot', 'roles', 'metas');
	
	/**
	 * The accessors to append to the model's array form.
	 *
	 * @var array
	 */
	protected $appends = array('first_name', 'last_name', 'avatar_url');
	
	/**
	 * The attributes that aren't mass assignable.
	 *
	 * @var array
	 */
	protected $guarded = array('id');
	
	/**
	 * Return the roles this user belongs to.
	 *
	 * @var Collection
	 */
	public function roles()
	{
		return $this->belongsToMany('Role', 'user_roles')->withTimestamps();
	}
	
	/**
	 * Return the metas associated with this user.
	 *
	 * @var Collection
	 */
	public function metas()
	{
		return $this->hasMany('User\Meta');
	}
	
	/**
	 * Returns a piece of meta information for this user.
	 * $default, if not found.
	 *
	 * @param string $name    Meta name.
	 * @param mixed  $default Default value.
	 * 
	 * @return boolean
	 */
	public function meta($name, $default = null)
	{
		$metas = $this->metas->filter(function ($meta) use ($name) {
			return ($meta->name == $name);
		});
		
		return $metas->isEmpty() ? $default : $metas->first()->value;
	}
	
	/**
	 * Convenience method to get the first name for this user.
	 *
	 * @return string
	 */
	public function getFirstNameAttribute()
	{
		return $this->meta('first_name');
	}
	
	/**
	 * Convenience method to get the last name for this user.
	 *
	 * @return string
	 */
	public function getLastNameAttribute()
	{
		return $this->meta('last_name');
	}
	
	/**
	 * Convenience method to get the name for this user.
	 *
	 * @return string
	 */
	public function getNameAttribute()
	{
		return "{$this->first_name} {$this->last_name}";
	}
	
	/**
	 * Convenience method to get avatar url for this user.
	 *
	 * @return string
	 */
	public function getAvatarUrlAttribute()
	{
		return 'http://www.gravatar.com/avatar/'
			. md5(strtolower(trim($this->email)))
			. '?d=' . urlencode('http://wiseheartdesign.com/images/articles/default-avatar.png')
			. '&s=128';
	}
	
	/**
	 * Convenience method to get the roles this user belongs to.
	 *
	 * @return array
	 */
	public function getUserRolesAttribute()
	{
		$user_roles = array();
		
		foreach ($this->roles as $role) {
			$user_roles[] = $role->name;
		}
		
		return $user_roles;
	}
	
	/**
	 * Convert the model instance to an array.
	 *
	 * @return array
	 */
	public function toArray()
	{
		if (!Site::wantsApi()) {
			return parent::toArray();
		}
		
		// Handle any preloading.
		$output = (array) Input::get('output', array());
		if (in_array('user:metas', $output)) {
			$this->metas;
		}
		
		$arr = parent::toArray();
		
		// Are we allowed to display the email address?
		if (!Acl::allowed($this, 'edit')) {
			unset($arr['email']);
		}
		
		// Handle any additional output.
		if (in_array('user:roles', $output)) {
			$arr['roles'] = $this->user_roles;
		}
		
		return $arr;
	}
}
