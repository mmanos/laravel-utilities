<?php

use Illuminate\Auth\UserTrait;
use Illuminate\Auth\UserInterface;

class User extends Model implements UserInterface
{
	use UserTrait, SoftDeletingTrait;
	
	/**
	 * The attributes excluded from the model's JSON form.
	 *
	 * @var array
	 */
	protected $hidden = array('password', 'deleted_at', 'remember_token', 'auth_reset_token', 'reset_token_expires_at', 'pivot', 'roles');
	
	/**
	 * The accessors to append to the model's array form.
	 *
	 * @var array
	 */
	protected $appends = array('avatar_url');
	
	/**
	 * The attributes that aren't mass assignable.
	 *
	 * @var array
	 */
	protected $guarded = array('id');
	
	/**
	 * The dates array.
	 *
	 * @var array
	 */
	protected $dates = array('deleted_at');
	
	/**
	 * Return the roles this user belongs to.
	 *
	 * @var Collection
	 */
	public function roles()
	{
		return $this->belongsToMany('Role', 'user_roles')->withTimestamps();
	}
	
	/**
	 * Convenience method to get the name for this user.
	 *
	 * @return string
	 */
	public function getNameAttribute()
	{
		return "{$this->first_name} {$this->last_name}";
	}
	
	/**
	 * Convenience method to get avatar url for this user.
	 *
	 * @return string
	 */
	public function getAvatarUrlAttribute()
	{
		return 'http://www.gravatar.com/avatar/'
			. md5(strtolower(trim($this->email)))
			. '?d=' . urlencode('http://wiseheartdesign.com/images/articles/default-avatar.png')
			. '&s=128';
	}
	
	/**
	 * Convenience method to get the roles this user belongs to.
	 *
	 * @return array
	 */
	public function getUserRolesAttribute()
	{
		$user_roles = array();
		
		foreach ($this->roles as $role) {
			$user_roles[] = $role->name;
		}
		
		return $user_roles;
	}
	
	/**
	 * Returns true if this user has the given role.
	 *
	 * @var string $role
	 * 
	 * @return bool
	 */
	public function hasRole($role)
	{
		return in_array($role, $this->user_roles);
	}
}
